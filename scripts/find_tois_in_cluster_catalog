#!/usr/bin/env python
"""
UNDER DEVELOPMENT
(based on seidan/toi/find gaia ID of tois in clusters.ipynb)
"""
import sys
from pathlib import Path
import argparse
from tqdm import tqdm
import pandas as pd
import astropy.units as u
from astropy.coordinates import SkyCoord
import flammkuchen as fk
import chronos as cr

if __name__ == "__main__":
    ap = argparse.ArgumentParser()
    # ap.add_argument("-toi", "--toiid", type=int, help="TOI id", default=None)
    # ap.add_argument(
    #    "-g", "--gaiaid", type=int, help="target Gaia DR2 id", default=None
    # )
    ap.add_argument(
        "-i",
        "--ignore-gaiaid",
        help="match Gaia DR2 id; use -i to ignore gaiaid",
        action="store_true",
        default=False,
    )
    ap.add_argument(
        "-c",
        "--cluster",
        help="cluster name where to check target membership",
        default=None,
    )
    ap.add_argument(
        "-cc",
        "--catalog",
        help="cluster catalog name",
        default="He2022b",
    )
    ap.add_argument("-v", "--verbose", action="store_true", default=False)
    ap.add_argument("--clobber", action="store_true", default=False)
    # ap.add_argument(
    #    "-r", "--radius", type=float, default=3, help="query radius in arcsec"
    # )
    ap.add_argument(
        "-p",
        "--show-plot",
        action="store_true",
        default=False,
        help="show cluster plots",
    )
    ap.add_argument(
        "-s",
        "--save_csv",
        action="store_true",
        default=False,
        help="save figures",
    )
    ap.add_argument(
        "-o",
        "--outdir",
        type=str,
        default=cr.DATA_PATH,
        help="output directory",
    )
    # args = ap.parse_args(None if sys.argv[1:] else ["-h"])
    args = ap.parse_args()
    tois = cr.get_tois(clobber=args.clobber, verbose=True, remove_FP=True)
    # update
    fp = Path(cr.DATA_PATH + "/toi_gaia_params.hdf5")
    if args.clobber:
        tois_gaia = cr.query_gaia_params_of_all_tois(
            clobber=False, update=args.clobber
        )
        tois_gaia.source_id = tois_gaia.source_id.astype(int)
    else:
        tois_gaia = fk.load(fp)
    tois_gaia = pd.DataFrame(tois_gaia).T
    cc = cr.ClusterCatalog(catalog_name=args.catalog)
    df_mem = cc.query_catalog(return_members=True)
    # df_mem.columns
    import pdb

    pdb.set_trace()

    idx1 = df_mem.source_id.isin(tois_gaia.source_id)
    idx2 = tois_gaia.source_id.isin(df_mem.source_id)
    # merge
    # cols = ['source_id','clusters','reference','Cluster','k13_name_match','k13_logt','distance']
    cols = df_mem.columns
    short_list = pd.merge(
        left=tois_gaia.loc[idx2, "source_id"].reset_index(),
        right=df_mem.loc[idx1, cols],
        on="source_id",
    )

    short_list = short_list.loc[short_list.Cluster.dropna().index]
    toi_short_list = tois[tois.TOI.isin(short_list.TOI.tolist())]
    short_list = pd.merge(left=short_list, right=toi_short_list, on="TOI")

    columns = ["TOI", "RA", "Dec", "Cluster", "Comments"]
    if args.save_csv:
        short_list[columns].to_csv("TOI_in_cluster_candidates.csv")

    coords = SkyCoord(
        ra=short_list["RA"],
        dec=short_list["Dec"],
        unit=("hourangle", "degree"),
    )
    if args.verbose:
        print(
            short_list[
                ["TOI", "RA", "Dec", "Cluster", "Comments"]
            ].reset_index(drop=True)
        )
        # for toi in short_list.TOI:
        #     t = cr.Target(toiid=toi,verbose=False)
        #     _ = t.query_tic_catalog(return_nearest_xmatch=True)
        #     print(toi, t.tic_params['ID'])

        if args.verbose:
            print(short_list[columns])
            # observable with MuSCATs
            print(
                "Dec>30 dec:\n",
                short_list.loc[coords.dec.deg > -30, "TOI"].values,
            )

    if args.show_plot:
        raise NotImplementedError("To be added later.")
